{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/params/index.tsx"],"names":[],"mappings":"AAAA,0EAA0E;AAE1E,OAAO,MAAM,MAAM,aAAa,CAAA;AAChC,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACzE,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAA;AACvC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAA;AAExC,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAA;AACxD,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAA;AAEtC,SAAS,SAAS,CAAI,KAAQ;IAC5B,MAAM,GAAG,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;IACzB,SAAS,CAAC,GAAG,EAAE;QACb,GAAG,CAAC,OAAO,GAAG,KAAK,CAAA;IACrB,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAA;IAEX,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,SAAS,iBAAiB,CACxB,QAAuB;IAEvB,MAAM,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAA;IAEpC,SAAS,CAAC,GAAG,EAAE;QACb,WAAW,CAAC,OAAO,GAAG,QAAQ,CAAA;IAChC,CAAC,CAAC,CAAA;IAEF,iDAAiD;IACjD,OAAO,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC,CAAM,EAAE,EAAE,CAAC,CAAA;AAC9E,CAAC;AAoED,MAAM,UAAU,WAAW;IAGzB,SAAS,QAAQ,CAmBf,GAAG,CAAC,IAAI,EAAE,WAAW,CAOpB;QASD,MAAM,EACJ,KAAK,GAAG,CAAC,KAAyB,EAAE,EAAE,CAAC,KAAK,EAC5C,OAAO,EACP,SAAS,GAAG,CAAC,KAAiB,EAAE,EAAE,CAAC,GAAG,KAAK,EAAE,EAC7C,uBAAuB,GACxB,GAAG,WAAW,IAAI,EAAE,CAAA;QACrB,MAAM,UAAU,GAAG,SAAS,EAAE,CAAA;QAC9B,MAAM,WAAW,GAAG,QAAQ,EAAE,CAAA;QAC9B,MAAM,gBAAgB,GAAG,aAAa,EAAE,CAAA;QACxC,MAAM,qBAAqB,GAAI,WAAW,EAAE,MAAc,EAAE,CAC1D,IAAI,CACS,CAAA;QAEf,MAAM,CAAC,oBAAoB,EAAE,uBAAuB,CAAC,GAAG,QAAQ,CAE9D,GAAG,EAAE,CAAC,qBAAqB,IAAK,OAAwB,CAAC,CAAA;QAE3D,MAAM,wBAAwB,GAAG,WAAW,CAAC,CAAC,KAAiB,EAAE,EAAE;YACjE,gBAAgB,EAAE,SAAS,CAAC;gBAC1B,CAAC,IAAI,CAAC,EAAE,KAAK;aACd,CAAC,CAAA;QACJ,CAAC,EAAE,EAAE,CAAC,CAAA;QAEN,MAAM,WAAW,GAAG,WAAW;YAC7B,CAAC,CAAC,qBAAqB;YACvB,CAAC,CAAC,oBAAoB,CAAA;QACxB,MAAM,cAAc,GAAG,WAAW;YAChC,CAAC,CAAC,wBAAwB;YAC1B,CAAC,CAAC,uBAAuB,CAAA;QAE3B,MAAM,eAAe,GAAG,iBAAiB,CAAC,SAAS,CAAC,CAAA;QACpD,MAAM,WAAW,GAAG,iBAAiB,CAAC,KAAK,CAAC,CAAA;QAC5C,MAAM,mBAAmB,GAAG,SAAS,CAAC,uBAAuB,CAAC,CAAA;QAE9D,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,CAAA;QACpC,MAAM,WAAW,GAAG,MAAM,CAAC,KAAK,CAAC,CAAA;QAEjC,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,KAAiB,EAAE,EAAE;YACpB,WAAW,CAAC,OAAO,GAAG,IAAI,CAAA;YAC1B,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,GAAG,MAAM,CAAA;YAClC,MAAM,QAAQ,GAAG,EAAE,GAAG,KAAK,EAAE,CAAA;YAC7B,IAAI,KAAK,IAAI,IAAI,IAAK,KAAa,KAAK,EAAE,EAAE;gBAC1C,QAAQ,CAAC,IAAc,CAAC,GAAG,eAAe,CAAC,KAAK,CAAC,CAAA;aAClD;iBAAM;gBACL,OAAO,QAAQ,CAAC,IAAc,CAAC,CAAA;aAChC;YAED,IAAI,mBAAmB,CAAC,OAAO,EAAE;gBAC/B,KAAK,MAAM,QAAQ,IAAI,mBAAmB,CAAC,OAAO,EAAE;oBAClD,OAAO,QAAQ,CAAC,QAAkB,CAAC,CAAA;iBACpC;aACF;YAED,MAAM,uBAAuB,GAC3B,KAAK,CAAC,IAAc,CAAC,IAAI,QAAQ,CAAC,IAAc,CAAC,CAAA;YAEnD,MAAM,MAAM,GAAG,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAA;YAErE,MAAM,CACJ;gBACE,QAAQ;gBACR,KAAK,EAAE,QAAQ;aAChB,EACD,SAAS,EACT;gBACE,OAAO,EAAE,IAAI;aACd,CACF,CAAA;QACH,CAAC,EACD,CAAC,IAAI,EAAE,eAAe,EAAE,mBAAmB,CAAC,CAC7C,CAAA;QAED,MAAM,QAAQ,GAAG,UAAU,EAAE,KAAK,EAAE,CAAC,IAAc,CAAC,CAAA;QAEpD,MAAM,KAAK,GAAG,OAAO,CAAa,GAAG,EAAE;YACrC,IAAI,KAAiB,CAAA;YACrB,IAAI,QAAQ,KAAK,SAAS,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE;gBAClD,KAAK,GAAG,YAAY,CAAC,OAAc,CAAA;aACpC;iBAAM;gBACL,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAe,CAAA;aAC5C;YACD,OAAO,KAAK,CAAA;QACd,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAA;QAE3B,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;YACzB,IAAI,CAAC,WAAW,EAAE;gBAChB,OAAO,CAAC,IAAI,CACV,sBACE,IACF,gPAAgP,CACjP,CAAA;aACF;YACD,OAAO,CAAC,WAAW,EAAE,cAAc,CAAC,CAAA;SACrC;QAED,OAAO,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAA;IAC1B,CAAC;IAED,OAAO;QACL,QAAQ;KACT,CAAA;AACH,CAAC","sourcesContent":["// From https://gist.github.com/nandorojo/052887f99bb61b54845474f324aa41cc\n\nimport Router from 'next/router'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { Platform } from 'react-native'\nimport { useRouter } from './use-router'\n\nimport { useNavigation } from '../router/use-navigation'\nimport { useRoute } from './use-route'\n\nfunction useStable<T>(value: T) {\n  const ref = useRef(value)\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n\n  return ref\n}\n\nfunction useStableCallback<T extends (...args: any[]) => any>(\n  callback: T | undefined\n): T {\n  const callbackRef = useRef(callback)\n\n  useEffect(() => {\n    callbackRef.current = callback\n  })\n\n  // https://github.com/facebook/react/issues/19240\n  return useMemo(() => ((...args) => callbackRef.current?.(...args)) as T, [])\n}\n\ntype Config<\n  Props extends Record<string, unknown>,\n  Required extends boolean,\n  ParsedType,\n  InitialValue\n> = (Required extends false\n  ? {\n      parse?: (value?: string | string[]) => ParsedType\n    }\n  : {\n      parse: (value?: string | string[]) => ParsedType\n    }) & {\n  stringify?: (value: ParsedType) => string\n  initial: InitialValue\n  paramsToClearOnSetState?: (keyof Props)[]\n}\n\ntype Params<\n  Props extends Record<string, unknown> = Record<string, string>,\n  Name extends keyof Props = keyof Props,\n  NullableUnparsedParsedType extends Props[Name] | undefined =\n    | Props[Name]\n    | undefined,\n  ParseFunction extends\n    | undefined\n    | ((\n        value?: string | string[]\n      ) => NonNullable<NullableUnparsedParsedType>) = (\n    value?: string | string[]\n  ) => NonNullable<NullableUnparsedParsedType>,\n  InitialValue = NullableUnparsedParsedType | undefined,\n  ParsedType = InitialValue extends undefined\n    ? NullableUnparsedParsedType\n    : ParseFunction extends undefined\n    ? NullableUnparsedParsedType\n    : NonNullable<NullableUnparsedParsedType>\n> = NonNullable<ParsedType> extends string\n  ?\n      | [name: Name, config: Config<Props, false, ParsedType, InitialValue>]\n      | [name: Name]\n  : [name: Name, config: Config<Props, true, ParsedType, InitialValue>]\n\ntype Returns<\n  Props extends Record<string, unknown> = Record<string, string>,\n  Name extends keyof Props = keyof Props,\n  NullableUnparsedParsedType extends Props[Name] | undefined =\n    | Props[Name]\n    | undefined,\n  ParseFunction extends\n    | undefined\n    | ((\n        value?: string | string[]\n      ) => NonNullable<NullableUnparsedParsedType>) = (\n    value?: string | string[]\n  ) => NonNullable<NullableUnparsedParsedType>,\n  InitialValue = NullableUnparsedParsedType | undefined,\n  ParsedType = InitialValue extends undefined\n    ? NullableUnparsedParsedType\n    : ParseFunction extends undefined\n    ? NullableUnparsedParsedType\n    : NonNullable<NullableUnparsedParsedType>\n> = readonly [\n  state: ParsedType | InitialValue,\n  setState: (value: ParsedType) => void\n]\n\nexport function createParam<\n  Props extends Record<string, unknown> = Record<string, string>\n>() {\n  function useParam<\n    Name extends keyof Props,\n    NullableUnparsedParsedType extends Props[Name] | undefined =\n      | Props[Name]\n      | undefined,\n    ParseFunction extends\n      | undefined\n      | ((\n          value?: string | string[]\n        ) => NonNullable<NullableUnparsedParsedType>) = (\n      value?: string | string[]\n    ) => NonNullable<NullableUnparsedParsedType>,\n    InitialValue = NullableUnparsedParsedType | undefined,\n    ParsedType = InitialValue extends undefined\n      ? NullableUnparsedParsedType\n      : ParseFunction extends undefined\n      ? NullableUnparsedParsedType\n      : NonNullable<NullableUnparsedParsedType>\n  >(\n    ...[name, maybeConfig]: Params<\n      Props,\n      Name,\n      NullableUnparsedParsedType,\n      ParseFunction,\n      InitialValue,\n      ParsedType\n    >\n  ): Returns<\n    Props,\n    Name,\n    NullableUnparsedParsedType,\n    ParseFunction,\n    InitialValue,\n    ParsedType\n  > {\n    const {\n      parse = (value?: string | string[]) => value,\n      initial,\n      stringify = (value: ParsedType) => `${value}`,\n      paramsToClearOnSetState,\n    } = maybeConfig || {}\n    const nextRouter = useRouter()\n    const nativeRoute = useRoute()\n    const nativeNavigation = useNavigation()\n    const nativeStateFromParams = (nativeRoute?.params as any)?.[\n      name\n    ] as ParsedType\n\n    const [nativeStateFromReact, setNativeStateFromReact] = useState<\n      ParsedType | InitialValue\n    >(() => nativeStateFromParams ?? (initial as InitialValue))\n\n    const setNativeStateFromParams = useCallback((value: ParsedType) => {\n      nativeNavigation?.setParams({\n        [name]: value,\n      })\n    }, [])\n\n    const nativeState = nativeRoute\n      ? nativeStateFromParams\n      : nativeStateFromReact\n    const setNativeState = nativeRoute\n      ? setNativeStateFromParams\n      : setNativeStateFromReact\n\n    const stableStringify = useStableCallback(stringify)\n    const stableParse = useStableCallback(parse)\n    const stableParamsToClear = useStable(paramsToClearOnSetState)\n\n    const initialValue = useRef(initial)\n    const hasSetState = useRef(false)\n\n    const setState = useCallback(\n      (value: ParsedType) => {\n        hasSetState.current = true\n        const { pathname, query } = Router\n        const newQuery = { ...query }\n        if (value != null && (value as any) !== '') {\n          newQuery[name as string] = stableStringify(value)\n        } else {\n          delete newQuery[name as string]\n        }\n\n        if (stableParamsToClear.current) {\n          for (const paramKey of stableParamsToClear.current) {\n            delete newQuery[paramKey as string]\n          }\n        }\n\n        const willChangeExistingParam =\n          query[name as string] && newQuery[name as string]\n\n        const action = willChangeExistingParam ? Router.replace : Router.push\n\n        action(\n          {\n            pathname,\n            query: newQuery,\n          },\n          undefined,\n          {\n            shallow: true,\n          }\n        )\n      },\n      [name, stableStringify, stableParamsToClear]\n    )\n\n    const webParam = nextRouter?.query?.[name as string]\n\n    const state = useMemo<ParsedType>(() => {\n      let state: ParsedType\n      if (webParam === undefined && !hasSetState.current) {\n        state = initialValue.current as any\n      } else {\n        state = stableParse(webParam) as ParsedType\n      }\n      return state\n    }, [stableParse, webParam])\n\n    if (Platform.OS !== 'web') {\n      if (!nativeRoute) {\n        console.warn(\n          `[solito] useParam('${\n            name as string\n          }') called when there is no React Navigation route available. In a future version, this will throw an error. Please fix this by only calling useParam() inside of a React Navigation route. For now, Solito will fallback to using React state.`\n        )\n      }\n      return [nativeState, setNativeState]\n    }\n\n    return [state, setState]\n  }\n\n  return {\n    useParam,\n  }\n}\n"]}