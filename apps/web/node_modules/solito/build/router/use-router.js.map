{"version":3,"file":"use-router.js","sourceRoot":"","sources":["../../src/router/use-router.ts"],"names":[],"mappings":"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","sourcesContent":["import type { NextRouter as NextRouterType } from 'next/router'\nimport { useContext, useMemo } from 'react'\nimport { Platform } from 'react-native'\n\nimport { parseNextPath } from './parse-next-path'\nimport {\n  getActionFromState,\n  getStateFromPath,\n  LinkingContext,\n  StackActions,\n} from './replace-helpers'\nimport { useLinkTo } from './use-link-to'\nimport { useNavigation } from './use-navigation'\nimport { useNextRouter } from './use-next-router'\n\n// copied from next/router to appease typescript error\n// if we don't manually write this here, then we get some ReturnType error on build\n// 🤷‍♂️\ninterface TransitionOptions {\n  shallow?: boolean\n  locale?: string | false\n  scroll?: boolean\n}\n\nexport function useRouter() {\n  const linkTo = useLinkTo()\n  const navigation = useNavigation()\n\n  const nextRouter = useNextRouter()\n\n  const linking = useContext(LinkingContext)\n\n  return useMemo(\n    () => ({\n      push: (\n        url: Parameters<NextRouterType['push']>[0],\n        as?: Parameters<NextRouterType['push']>[1],\n        transitionOptions?: TransitionOptions\n      ) => {\n        if (Platform.OS === 'web') {\n          nextRouter?.push(url, as, transitionOptions)\n        } else {\n          const to = parseNextPath(as || url)\n\n          if (to) {\n            linkTo(to)\n          }\n        }\n      },\n      replace: (\n        url: Parameters<NextRouterType['replace']>[0],\n        as?: Parameters<NextRouterType['replace']>[1],\n        transitionOptions?: TransitionOptions & {\n          experimental?:\n            | {\n                nativeBehavior?: undefined\n              }\n            | {\n                nativeBehavior: 'stack-replace'\n                isNestedNavigator: boolean\n              }\n        }\n      ) => {\n        if (Platform.OS === 'web') {\n          nextRouter?.replace(url, as, transitionOptions)\n        } else {\n          const to = parseNextPath(as || url)\n\n          if (to) {\n            if (\n              transitionOptions?.experimental?.nativeBehavior ===\n              'stack-replace'\n            ) {\n              if (linking?.options) {\n                // custom logic to create a replace() from a URL on native\n                // https://github.com/react-navigation/react-navigation/discussions/10517\n                const { options } = linking\n\n                const state = options?.getStateFromPath\n                  ? options.getStateFromPath(to, options.config)\n                  : getStateFromPath(to, options?.config)\n\n                if (state) {\n                  const action = getActionFromState(state, options?.config)\n\n                  if (action !== undefined) {\n                    if (\n                      'payload' in action &&\n                      action.payload &&\n                      'name' in action.payload &&\n                      action.payload.name\n                    ) {\n                      const { name, params } = action.payload\n                      if (\n                        transitionOptions?.experimental?.isNestedNavigator &&\n                        params &&\n                        'screen' in params &&\n                        params.screen\n                      ) {\n                        navigation?.dispatch(\n                          StackActions.replace(\n                            params.screen,\n                            params.params as object | undefined\n                          )\n                        )\n                      } else {\n                        navigation?.dispatch(StackActions.replace(name, params))\n                      }\n                    } else {\n                      navigation?.dispatch(action)\n                    }\n                  } else {\n                    navigation?.reset(state)\n                  }\n                }\n              } else {\n                // fallback in case the linking context didn't work\n                console.warn(`[solito] replace(\"${to}\") faced an issue. You should still see your new screen, but it probably didn't replace the previous one. This may be due to a breaking change in React Navigation. \n  Please open an issue at https://github.com/nandorojo/solito and report how this happened. Thanks!`)\n                linkTo(to)\n              }\n            } else {\n              linkTo(to)\n            }\n          }\n        }\n      },\n      back: () => {\n        if (Platform.OS === 'web') {\n          nextRouter?.back()\n        } else {\n          navigation?.goBack()\n        }\n      },\n      parseNextPath,\n    }),\n    [\n      linkTo,\n      navigation,\n      nextRouter?.push,\n      nextRouter?.back,\n      nextRouter?.replace,\n    ]\n  )\n}\n"]}