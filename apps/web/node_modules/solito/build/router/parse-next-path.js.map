{"version":3,"file":"parse-next-path.js","sourceRoot":"","sources":["../../src/router/parse-next-path.ts"],"names":[],"mappings":"AAEA,MAAM,aAAa,GAAG,CAAC,IAAuC,EAAE,EAAE;IAChE,IAAI,IAAI,GAAG,CAAC,OAAO,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAA;IAEjE,8EAA8E;IAC9E,mDAAmD;IACnD,oCAAoC;IACpC,2DAA2D;IAC3D,IAAI,OAAO,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC,KAAK,IAAI,OAAO,IAAI,CAAC,KAAK,IAAI,QAAQ,EAAE;QAC1E,MAAM,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,EAAE,CAAA;QAC/B,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;YACvB,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,GAAG,GAAG,CAAC,EAAE;gBAC7B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,IAAI,GAAG,GAAG,EAAE,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,CAAC,CAAA;gBACtD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAA;aAClB;iBAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,GAAG,GAAG,CAAC,EAAE;gBACvC,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAC,CAAA;gBACzB,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBACzB,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAA;oBACpD,OAAO,KAAK,CAAC,GAAG,CAAC,CAAA;iBAClB;aACF;SACF;QACD,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,MAAM,EAAE;YAC7B,IAAI,IAAI,GAAG,CAAA;YACX,KAAK,MAAM,GAAG,IAAI,KAAK,EAAE;gBACvB,IAAI,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,EAAE;oBACtB,IAAI,IAAI,GAAG,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,GAAG,CAAA;iBAChC;aACF;YACD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC5C,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAA;aACzB;SACF;KACF;IAED,OAAO,IAAI,CAAA;AACb,CAAC,CAAA;AAED,OAAO,EAAE,aAAa,EAAE,CAAA","sourcesContent":["import type { NextRouter } from 'next/router'\n\nconst parseNextPath = (from: Parameters<NextRouter['push']>[0]) => {\n  let path = (typeof from == 'string' ? from : from.pathname) || ''\n\n  // replace each instance of [key] with the corresponding value from query[key]\n  // this ensures we're navigating to the correct URL\n  // it currently ignores [[...param]]\n  // but I can't see why you would use this with RN + Next.js\n  if (typeof from == 'object' && from.query && typeof from.query == 'object') {\n    const query = { ...from.query }\n    for (const key in query) {\n      if (path.includes(`[${key}]`)) {\n        path = path.replace(`[${key}]`, `${query[key] ?? ''}`)\n        delete query[key]\n      } else if (path.includes(`[...${key}]`)) {\n        const values = query[key]\n        if (Array.isArray(values)) {\n          path = path.replace(`[...${key}]`, values.join('/'))\n          delete query[key]\n        }\n      }\n    }\n    if (Object.keys(query).length) {\n      path += '?'\n      for (const key in query) {\n        if (query[key] != null) {\n          path += `${key}=${query[key]}&`\n        }\n      }\n      if (path.endsWith('&') || path.endsWith('?')) {\n        path = path.slice(0, -1)\n      }\n    }\n  }\n\n  return path\n}\n\nexport { parseNextPath }\n"]}