import { useMemo, useSyncExternalStore } from 'react';
import { Dimensions, StyleSheet } from 'react-native';
import { useSolitoImageContext } from './context';
import { defaultLoader } from './default-loader';
import { generateImgAttrs, getInt, imageConfigDefault, resolveSourceFromImgAttributes, } from './helpers';
export function useSolitoImage({ src, loader, width, height, quality = 75, crossOrigin, referrerPolicy, alt, fill, onLoadingComplete, loading, priority, placeholder, blurDataURL, sizes, style, onLayout, unoptimized, ...props }) {
    const contextConfig = useSolitoImageContext();
    const config = useMemo(() => {
        const c = { ...imageConfigDefault, ...contextConfig };
        const allSizes = [...c.deviceSizes, ...c.imageSizes].sort((a, b) => a - b);
        const deviceSizes = c.deviceSizes.sort((a, b) => a - b);
        return { ...c, allSizes, deviceSizes };
    }, [contextConfig]);
    const headers = {};
    if (crossOrigin === 'use-credentials') {
        headers['Access-Control-Allow-Credentials'] = 'true';
    }
    if (referrerPolicy != null) {
        headers['Referrer-Policy'] = referrerPolicy;
    }
    const uri = useSyncExternalStore((callback) => {
        const subscription = Dimensions.addEventListener('change', callback);
        return () => subscription?.remove();
    }, () => {
        const dimensions = Dimensions.get('window');
        if (typeof src == 'string') {
            const attrs = generateImgAttrs({
                src,
                config,
                loader: ({ config: _, ...opts }) => {
                    if (loader) {
                        return loader(opts);
                    }
                    return defaultLoader({ ...opts, config });
                },
                unoptimized: Boolean(unoptimized),
                quality: getInt(quality || 75),
                sizes,
                width: getInt(width || 400),
            });
            const { uri } = resolveSourceFromImgAttributes({
                ...attrs,
                dimensions,
            });
            return uri;
        }
        return undefined;
    });
    const source = useMemo(() => {
        const headers = {};
        if (crossOrigin === 'use-credentials') {
            headers['Access-Control-Allow-Credentials'] = 'true';
        }
        if (referrerPolicy != null) {
            headers['Referrer-Policy'] = referrerPolicy;
        }
        if (typeof uri == 'string') {
            return {
                uri,
                height,
                width,
                headers,
                cache: priority ? 'force-cache' : 'default',
            };
        }
        return src;
    }, [uri, src, height, width, priority, referrerPolicy, crossOrigin]);
    return {
        ...props,
        progressiveRenderingEnabled: true,
        onLoadingComplete,
        source,
        accessible: Boolean(alt),
        onLayout,
        style: [fill && StyleSheet.absoluteFill, style],
        // adapter for older versions of RN
        // https://github.com/facebook/react-native/blob/main/Libraries/Image/Image.android.js#L169-L194
        accessibilityLabel: props['aria-label'] ?? alt,
        accessibilityState: {
            busy: booleanish(props['aria-busy']),
            checked: booleanish(props['aria-checked']),
            disabled: booleanish(props['aria-disabled']),
            expanded: booleanish(props['aria-expanded']),
            selected: booleanish(props['aria-selected']),
        },
    };
}
function booleanish(value) {
    // this should get upstreamed in RN
    return (value === 'true' ? true : value === 'false' ? false : value);
}
//# sourceMappingURL=use-solito-image.js.map