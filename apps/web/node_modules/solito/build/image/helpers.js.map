{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../src/image/helpers.ts"],"names":[],"mappings":"AAYA,SAAS,SAAS,CAChB,EAAE,WAAW,EAAE,QAAQ,EAAe,EACtC,KAAyB,EACzB,KAAyB;IAEzB,IAAI,KAAK,EAAE;QACT,yDAAyD;QACzD,MAAM,eAAe,GAAG,oBAAoB,CAAA;QAC5C,MAAM,YAAY,GAAG,EAAE,CAAA;QACvB,KAAK,IAAI,KAAK,EAAE,CAAC,KAAK,GAAG,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,EAAE;YAC5D,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;SAC1C;QACD,IAAI,YAAY,CAAC,MAAM,EAAE;YACvB,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,YAAY,CAAC,GAAG,IAAI,CAAA;YACtD,OAAO;gBACL,MAAM,EAAE,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,WAAW,CAAC,CAAC,CAAC,GAAG,aAAa,CAAC;gBACnE,IAAI,EAAE,GAAG;aACV,CAAA;SACF;QACD,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA;KACvC;IACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;QAC7B,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA;KAC1C;IAED,MAAM,MAAM,GAAG;QACb,GAAG,IAAI,GAAG;QACR,uEAAuE;QACvE,qEAAqE;QACrE,kEAAkE;QAClE,oEAAoE;QACpE,uEAAuE;QACvE,sEAAsE;QACtE,uCAAuC;QACvC,qIAAqI;QACrI,CAAC,KAAK,EAAE,KAAK,GAAG,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,CACpC,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CACrE,CACF;KACF,CAAA;IACD,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,CAAA;AAC9B,CAAC;AAmBD,MAAM,UAAU,MAAM,CAAC,CAAU;IAC/B,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,OAAO,CAAC,KAAK,WAAW,EAAE;QACrD,OAAO,CAAC,CAAA;KACT;IACD,IAAI,OAAO,CAAC,KAAK,QAAQ,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;QAC/C,OAAO,QAAQ,CAAC,CAAC,EAAE,EAAE,CAAC,CAAA;KACvB;IACD,OAAO,GAAG,CAAA;AACZ,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,EAC/B,MAAM,EACN,GAAG,EACH,WAAW,EACX,KAAK,EACL,OAAO,EACP,KAAK,EACL,MAAM,GACU;IAChB,IAAI,WAAW,EAAE;QACf,OAAO,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,CAAA;KACpD;IAED,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAA;IACxD,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,CAAA;IAE9B,OAAO;QACL,KAAK,EAAE,CAAC,KAAK,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK;QAC/C,MAAM,EAAE,MAAM;aACX,GAAG,CACF,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACP,GAAG,MAAM,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,IAC3C,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CACzB,GAAG,IAAI,EAAE,CACZ;aACA,IAAI,CAAC,IAAI,CAAC;QAEb,uEAAuE;QACvE,mEAAmE;QACnE,yEAAyE;QACzE,0EAA0E;QAC1E,2BAA2B;QAC3B,sDAAsD;QACtD,GAAG,EAAE,MAAM,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;KAC3D,CAAA;AACH,CAAC;AAED,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,EAC7C,GAAG,EACH,MAAM,EACN,KAAK,EACL,UAAU,GASX,EAAmB,EAAE;IACpB,IAAI;QACF,IAAI,MAAM,EAAE;YACV,MAAM,KAAK,GAAG,CAAC,IAAY,EAAE,EAAE;gBAC7B,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,CAAC,GAAG,GAAG,CAAA;YACxE,CAAC,CAAA;YACD,MAAM,MAAM,GAAG,CAAC,IAAY,EAAE,EAAE;gBAC9B,OAAO,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA;YAC7C,CAAC,CAAA;YACD,MAAM,UAAU,GAAG,CAAC,IAAY,EAAE,EAAE;gBAClC,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACvB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAA;iBACnB;gBACD,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA;YACrB,CAAC,CAAA;YACD,MAAM,OAAO,GAAG,CAAC,IAAY,EAAU,EAAE;gBACvC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACtB,OAAO,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAA;iBACtC;gBACD,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACvB,OAAO,KAAK,CAAC,IAAI,CAAC,CAAA;iBACnB;gBACD,OAAO,MAAM,CAAC,IAAI,CAAC,CAAA;YACrB,CAAC,CAAA;YAED,MAAM,OAAO,GAAG,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,EAAE,CAAA;YAEvC,IAAI,IAAI,GAAG,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,OAAO,CAAC,CAAA;YAC1D,KAAK,IAAI,SAAS,IAAI,OAAO,EAAE;gBAC7B,SAAS,GAAG,SAAS,CAAC,IAAI,EAAE,CAAA;gBAE5B,gDAAgD;gBAChD,MAAM,eAAe,GAAG,6BAA6B,CAAA;gBACrD,MAAM,mBAAmB,GAAG,eAAe,CAAC,IAAI,CAAC,SAAS,CAAC,CAAA;gBAE3D,IAAI,mBAAmB,EAAE;oBACvB,uDAAuD;oBACvD,yEAAyE;oBACzE,+DAA+D;oBAE/D,MAAM,QAAQ,GAAG,SAAS,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAA;oBAC1D,MAAM,aAAa,GAAG,SAAS,CAAC,QAAQ,CAAC,SAAS,CAAC;wBACjD,CAAC,CAAC,QAAQ;wBACV,CAAC,CAAC,OAAO,CAAA;oBAEX,MAAM,UAAU,GAAG,SAAS;yBACzB,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC;yBAC5B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACb,IAAI,EAAE,CAAA;oBAET,MAAM,cAAc,GAAG,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;wBAC9C,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;wBAC5C,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC;4BAC3B,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG,CAAC;gCAClD,UAAU,CAAC,KAAK;4BAClB,CAAC,CAAC,IAAI,CAAA;oBAER,IAAI,cAAc,KAAK,IAAI,EAAE;wBAC3B,MAAM,IAAI,KAAK,CACb,+FAA+F,CAChG,CAAA;qBACF;oBAED,IAAI,OAAO,GAAG,KAAK,CAAA;oBAEnB,IAAI,QAAQ,KAAK,KAAK,EAAE;wBACtB,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,IAAI,cAAc,CAAA;qBACtD;yBAAM,IAAI,QAAQ,KAAK,KAAK,EAAE;wBAC7B,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,IAAI,cAAc,CAAA;qBACtD;oBAED,IAAI,OAAO,EAAE;wBACX,IAAI,GAAG,cAAc,CAAA;wBACrB,MAAK;qBACN;iBACF;aACF;YAED,MAAM,OAAO,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;gBAChD,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAA;gBAElD,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACtB,mBAAmB;oBACnB,qGAAqG;oBACrG,IAAI;oBAEJ,qDAAqD;oBAErD,OAAO;wBACL,SAAS;wBACT,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC,GAAG,UAAU,CAAC,KAAK,EAAE,+BAA+B;qBAC9F,CAAA;iBACF;gBAED,OAAO;oBACL,SAAS;oBACT,IAAI,EAAE,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,EAAE,EAAE,CAAC;iBAC1C,CAAA;YACH,CAAC,CAAC,CAAA;YAEF,MAAM,6BAA6B,GAAG,OAAO,CAAC,IAAI,CAChD,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,IAAI,IAAI,CAChC,CAAA;YAED,IAAI,6BAA6B,EAAE;gBACjC,OAAO,EAAE,GAAG,EAAE,6BAA6B,CAAC,SAAS,EAAE,CAAA;aACxD;SACF;QAED,OAAO;YACL,GAAG,EAAE,GAAG;SACT,CAAA;KACF;IAAC,OAAO,CAAM,EAAE;QACf,MAAM,IAAI,KAAK,CACb,gDACE,CAAC,EAAE,OAAO,IAAI,gBAChB,KAAK,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,EAAE,CAC9C,CAAA;KACF;AACH,CAAC,CAAA;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAwB;IACrD,WAAW,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;IAC1D,UAAU,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;IAC/C,IAAI,EAAE,cAAc;IACpB,uBAAuB;IACvB,oBAAoB;IACpB,iBAAiB;IACjB,gCAAgC;IAChC,yBAAyB;IACzB,6BAA6B;IAC7B,gCAAgC;IAChC,4EAA4E;IAC5E,wBAAwB;IACxB,wBAAwB;CACzB,CAAA","sourcesContent":["import type NextImage from 'next/image'\nimport type { ImageResizeMode } from 'react-native'\nimport { defaultLoader } from './default-loader'\n\nimport { ImageConfig, ImageConfigComplete } from './types'\n\nexport type ImageLoaderProps = {\n  src: string\n  width: number\n  quality?: number\n}\n\nfunction getWidths(\n  { deviceSizes, allSizes }: ImageConfig,\n  width: number | undefined,\n  sizes: string | undefined\n): { widths: number[]; kind: 'w' | 'x' } {\n  if (sizes) {\n    // Find all the \"vw\" percent sizes used in the sizes prop\n    const viewportWidthRe = /(^|\\s)(1?\\d?\\d)vw/g\n    const percentSizes = []\n    for (let match; (match = viewportWidthRe.exec(sizes)); match) {\n      percentSizes.push(parseInt(match[2], 10))\n    }\n    if (percentSizes.length) {\n      const smallestRatio = Math.min(...percentSizes) * 0.01\n      return {\n        widths: allSizes.filter((s) => s >= deviceSizes[0] * smallestRatio),\n        kind: 'w',\n      }\n    }\n    return { widths: allSizes, kind: 'w' }\n  }\n  if (typeof width !== 'number') {\n    return { widths: deviceSizes, kind: 'w' }\n  }\n\n  const widths = [\n    ...new Set(\n      // > This means that most OLED screens that say they are 3x resolution,\n      // > are actually 3x in the green color, but only 1.5x in the red and\n      // > blue colors. Showing a 3x resolution image in the app vs a 2x\n      // > resolution image will be visually the same, though the 3x image\n      // > takes significantly more data. Even true 3x resolution screens are\n      // > wasteful as the human eye cannot see that level of detail without\n      // > something like a magnifying glass.\n      // https://blog.twitter.com/engineering/en_us/topics/infrastructure/2019/capping-image-fidelity-on-ultra-high-resolution-devices.html\n      [width, width * 2 /*, width * 3*/].map(\n        (w) => allSizes.find((p) => p >= w) || allSizes[allSizes.length - 1]\n      )\n    ),\n  ]\n  return { widths, kind: 'x' }\n}\n\ntype GenImgAttrsData = {\n  config: ImageConfig\n  src: string\n  unoptimized: boolean\n  loader: typeof defaultLoader\n  // | NonNullable<React.ComponentProps<typeof NextImage>['loader']>\n  width?: number\n  quality?: number\n  sizes?: string\n}\n\ntype GenImgAttrsResult = {\n  src: string\n  srcSet: string | undefined\n  sizes: string | undefined\n}\n\nexport function getInt(x: unknown): number | undefined {\n  if (typeof x === 'number' || typeof x === 'undefined') {\n    return x\n  }\n  if (typeof x === 'string' && /^[0-9]+$/.test(x)) {\n    return parseInt(x, 10)\n  }\n  return NaN\n}\n\nexport function generateImgAttrs({\n  config,\n  src,\n  unoptimized,\n  width,\n  quality,\n  sizes,\n  loader,\n}: GenImgAttrsData): GenImgAttrsResult {\n  if (unoptimized) {\n    return { src, srcSet: undefined, sizes: undefined }\n  }\n\n  const { widths, kind } = getWidths(config, width, sizes)\n  const last = widths.length - 1\n\n  return {\n    sizes: !sizes && kind === 'w' ? '100vw' : sizes,\n    srcSet: widths\n      .map(\n        (w, i) =>\n          `${loader({ src, quality, width: w, config })} ${\n            kind === 'w' ? w : i + 1\n          }${kind}`\n      )\n      .join(', '),\n\n    // It's intended to keep `src` the last attribute because React updates\n    // attributes in order. If we keep `src` the first one, Safari will\n    // immediately start to fetch `src`, before `sizes` and `srcSet` are even\n    // updated by React. That causes multiple unnecessary requests if `srcSet`\n    // and `sizes` are defined.\n    // This bug cannot be reproduced in Chrome or Firefox.\n    src: loader({ quality, width: widths[last], src, config }),\n  }\n}\n\nexport const resolveSourceFromImgAttributes = ({\n  src,\n  srcSet,\n  sizes,\n  dimensions,\n}: {\n  src: string\n  srcSet?: string\n  sizes?: string\n  dimensions: {\n    width: number\n    height: number\n  }\n}): { uri: string } => {\n  try {\n    if (srcSet) {\n      const getVw = (size: string) => {\n        return (parseInt(size.replace('vw', ''), 10) * dimensions.width) / 100\n      }\n      const getPix = (size: string) => {\n        return parseInt(size.replace('px', ''), 10)\n      }\n      const getVwOrPix = (size: string) => {\n        if (size.includes('vw')) {\n          return getVw(size)\n        }\n        return getPix(size)\n      }\n      const getSize = (size: string): number => {\n        if (size.includes(')')) {\n          return getVwOrPix(size.split(')')[1])\n        }\n        if (size.endsWith('vw')) {\n          return getVw(size)\n        }\n        return getPix(size)\n      }\n\n      const sizeSet = sizes?.split(',') ?? []\n\n      let size = getSize(sizeSet[sizeSet.length - 1] || `100vw`)\n      for (let sizeChunk of sizeSet) {\n        sizeChunk = sizeChunk.trim()\n\n        // regex to check for (min-width: or (max-width:\n        const mediaQueryRegex = /(\\(min-width:|\\(max-width:)/\n        const mediaQueryCondition = mediaQueryRegex.test(sizeChunk)\n\n        if (mediaQueryCondition) {\n          // the string looks like this: (max-width: 600px) 480px\n          // extract pixels from media query, and then say if it's min or max-width\n          // finally, get the pixels to the right as the actual sizeValue\n\n          const minOrMax = sizeChunk.includes('min') ? 'min' : 'max'\n          const heightOrWidth = sizeChunk.includes('-height')\n            ? 'height'\n            : 'width'\n\n          const sizeString = sizeChunk\n            .replace(mediaQueryRegex, '')\n            .split(')')[1]\n            .trim()\n\n          const mediaQuerySize = sizeString.includes('px')\n            ? parseInt(sizeString.replace('px', ''), 10)\n            : sizeString.includes('vw')\n            ? (parseInt(sizeString.replace('vw', ''), 10) / 100) *\n              dimensions.width\n            : null\n\n          if (mediaQuerySize === null) {\n            throw new Error(\n              '[solito/image] Invalid condition passed to sizes (${sizes}). ${size} does not end in px or vw'\n            )\n          }\n\n          let matches = false\n\n          if (minOrMax === 'min') {\n            matches = dimensions[heightOrWidth] >= mediaQuerySize\n          } else if (minOrMax === 'max') {\n            matches = dimensions[heightOrWidth] <= mediaQuerySize\n          }\n\n          if (matches) {\n            size = mediaQuerySize\n            break\n          }\n        }\n      }\n\n      const sources = srcSet.split(', ').map((source) => {\n        const [sourceUrl, size] = source.trim().split(' ')\n\n        if (size.endsWith('x')) {\n          // throw new Error(\n          //   `[solito/image] srcSet does not support x descriptors, but it got \"${size}\" inside of ${srcSet}`\n          // )\n\n          // TODO what is the right way to handle 1x, 2x sizes?\n\n          return {\n            sourceUrl,\n            size: parseInt(size.replace('x', ''), 10) * dimensions.width, // should this use image width?\n          }\n        }\n\n        return {\n          sourceUrl,\n          size: parseInt(size.replace('w', ''), 10),\n        }\n      })\n\n      const firstSourceThatMatchesforSize = sources.find(\n        (source) => source.size >= size\n      )\n\n      if (firstSourceThatMatchesforSize) {\n        return { uri: firstSourceThatMatchesforSize.sourceUrl }\n      }\n    }\n\n    return {\n      uri: src,\n    }\n  } catch (e: any) {\n    throw new Error(\n      `[solito/image] Error parsing srcSet & sizes: ${\n        e?.message || 'unknown error.'\n      }. ${JSON.stringify({ src, srcSet, sizes })}`\n    )\n  }\n}\n\nexport const imageConfigDefault: ImageConfigComplete = {\n  deviceSizes: [640, 750, 828, 1080, 1200, 1920, 2048, 3840],\n  imageSizes: [16, 32, 48, 64, 96, 128, 256, 384],\n  path: '/_next/image',\n  //   loader: 'default',\n  //   loaderFile: '',\n  //   domains: [],\n  //   disableStaticImages: false,\n  //   minimumCacheTTL: 60,\n  //   formats: ['image/webp'],\n  //   dangerouslyAllowSVG: false,\n  //   contentSecurityPolicy: `script-src 'none'; frame-src 'none'; sandbox;`,\n  //   remotePatterns: [],\n  //   unoptimized: false,\n}\n"]}